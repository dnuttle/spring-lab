<beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"
  xmlns:p="http://www.springframework.org/schema/p">

  <!-- note that if you import another bean file, its path is relative to this bean file,
  not to the application as a whole.
  You could have one "master" bean file at the top of the classpath, and it might load various bean files further down
  in the tree.  Although that could be confusing.
   -->
  <import resource="more-beans.xml"/>

  <!-- A note about bean scope
  By default, the scope for a bean is singleton.  This is to be preferred whenever a bean is stateless.
  If it is not stateless, then it should have a scope of prototype.
  Note that if the class attribute of a bean refers to a factory with a static factory method,
  then its scope should be singleton, although its factory method is free to prototype beans. 
   -->

  <!-- A simple bean with a constructor argument; scope defaults to singleton -->
  <bean id="name" class="net.nuttle.spring.beans.NameBean">
    <constructor-arg type="java.lang.String" index="0">
      <value>The name value</value>
    </constructor-arg>
  </bean>
  
  <bean id="name-two-constructor-args" class="net.nuttle.spring.beans.NameBean">
    <constructor-arg type="java.lang.String" index="0">
      <value>The name value</value>
    </constructor-arg>
    <constructor-arg type="java.lang.String" index="1">
      <value>ID10001</value>
    </constructor-arg>
  </bean>

  <!-- A simple bean with a property; scope is set to prototype -->
  <bean id="address" class="net.nuttle.spring.beans.AddressBean" scope="prototype">
    <property name="address" value="An address"/>
  </bean>
  
  <!-- A simple bean with a property defined using p namespace -->
  <bean id="address2" class="net.nuttle.spring.beans.AddressBean" scope="prototype"
      p:address="101 Main">
  </bean>
  
  <!-- A bean definition with no constructor args (invalid) -->
  <bean id="name-no-constructor-args" class="net.nuttle.spring.beans.NameBean" lazy-init="true" scope="singleton"/>
  
  <!-- A bean definition with too many constructor args -->
  <bean id="name-too-many-constructor-args" class="net.nuttle.spring.beans.NameBean" lazy-init="true">
    <constructor-arg type="java.lang.String" index="0">
      <value>This is the constructor value</value>
    </constructor-arg>
    <constructor-arg type="int" index="1">
      <value>1</value>
    </constructor-arg>
  </bean>
  
  <!-- A bean definition with an invalid property name -->
  <!-- Note that there is no need to use lazy-init=true to prevent an error from occurring at context startup,
  because scope of prototype means lazy instantiation by default. -->
  <bean id="name-invalid-property" class="net.nuttle.spring.beans.NameBean" scope="prototype">
    <constructor-arg type="java.lang.String" index="0">
      <value>This is the constructor value</value>
    </constructor-arg>
    <property name="notexist" value="some value"/>
  </bean>
  
  <!-- A bean definition with a ref to another bean -->
  <bean id="name-with-address" class="net.nuttle.spring.beans.NameBean" scope="prototype">
    <constructor-arg value="A name bean"></constructor-arg>
    <property name="address">
        <!-- local attribute means that bean "address" is in this same xml file
        otherwise, use bean attribute.  -->
        <ref local="address"/>
    </property>
  </bean>
  
  <!-- A bean definition with an inner (unnamed) bean -->
  <bean id="name-with-inner" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="A bean with an inner bean"/>
      <property name="address">
          <bean class="net.nuttle.spring.beans.AddressBean" scope="prototype">
              <property name="address" value="inner bean address"/>
          </bean>
      </property>
  </bean>
        
  <bean id="name-factory" class="net.nuttle.spring.beans.NameBeanFactory" factory-method="getNameBean"/>
  
  <bean id="name-factory-2" class="net.nuttle.spring.beans.NameBeanFactory" factory-method="getNameBean">
      <constructor-arg value="factory name"/>
  </bean>
  
  <!-- Bean that has a non-static factory method -->
  <!-- If class has more than one factory method, define a bean with unique id for each -->
  <bean id="non-static-name-factory" class="net.nuttle.spring.beans.NameBeanFactory"/>
  
  <!-- Bean that uses non-static factory bean -->
  <bean id="non-static-name" factory-bean="non-static-name-factory" factory-method="getNameBean2">
      <constructor-arg value="Non static factory name"/>
  </bean>
  
  <!-- A bean that loads properties from a properties file 
  Note that, unlike importing another bean xml file, the path for the property file
  is not relative to this file -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="location" value="net/nuttle/settings.properties"/>
  </bean>
  
  <!-- A bean that gets a value from the properties file bean -->
  <bean id="address-property-file" class="net.nuttle.spring.beans.AddressBean" p:address="${home.address}"/>
  
  <!-- Properties can also be embedded directly into this file -->
  <bean id="mappings" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="properties">
          <value>
              prop1=value1
              prop2=value2
          </value>
      </property>
  </bean>
  
  <!-- Bean with list of values -->
  <bean id="name-with-list" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name-with-list"/>
      <property name="listValues">
          <list>
              <value>First value</value>
              <value>Second value</value>
              <value>Third value</value>
          </list>
      </property>
  </bean>
  
  <!-- Bean with map -->
  <bean id="name-with-map" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name-with-map"/>
      <property name="mapValues">
          <map>
              <entry key="a" value="1"/>
              <entry key="b" value="2"/>
          </map>
      </property>
  </bean>
  
  <!-- Bean with map in which one value is of wrong type -->
  <bean id="name-with-bad-map" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name-with-map"/>
      <property name="mapValues">
          <map>
              <entry key="a" value="a"/>
              <entry key="b" value="2"/>
          </map>
      </property>
  </bean>
  
  <!--  Bean with set -->
  <bean id="name-with-set" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name"/>
      <property name="setValues">
          <set>
              <value>one</value>
              <value>two</value>
          </set>
      </property>
  </bean>
  
  <!-- Bean with properties -->
  <bean id="name-with-props" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name"/>
      <property name="properties">
          <props>
              <prop key="name">Lebowski</prop>
              <prop key="rug">Persian</prop>
          </props>
      </property>
  </bean>
  
  <!-- Bean with null value -->
  <bean id="name-with-null" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg><null/></constructor-arg>
  </bean>
  
  <!-- Bean with merged values -->
  <!-- It's possible to merge maps, lists, sets and properties. -->
  <bean id="name-with-parent-map" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="name"/>
      <property name="mapValues">
          <map>
	          <entry key="one" value="1"/>
	          <entry key="two" value="1"/>
          </map>
      </property>
  </bean>
  
  <!-- This bean's map merges into the one in name-with-merged-map -->
  <bean id="name-with-merged-map" parent="name-with-parent-map" class="net.nuttle.spring.beans.NameBean" scope="prototype">
      <constructor-arg value="child"/>
      <property name="mapValues">
          <map merge="true">
              <entry key="one" value="2"/>
              <entry key="three" value="2"/>
          </map>
      </property>
  </bean>
  
  <!-- A bean that is autowired to another bean -->
  <bean id="stringBean" class="net.nuttle.spring.beans.StringBean" scope="prototype">
      <property name="string" value="ABCD"/>
  </bean>
  
  <!-- A bean that autowires another bean by name -->
  <bean id="name-autowire-by-name" class="net.nuttle.spring.beans.NameBean" autowire="byName" scope="prototype">
      <constructor-arg value="name"/>
  </bean>
  
  <!-- A bean that autowires another bean by type -->
  <bean id="name-autowire-by-type" class="net.nuttle.spring.beans.NameBean" autowire="byType" scope="prototype">
      <constructor-arg value="name"/>
  </bean>
</beans>